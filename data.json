{"input": "import * as React from 'react';\nimport {\n  Icon24Attach,\n  Icon24CheckCircleOutline,\n  Icon24Send,\n  Icon28AddCircleOutline,\n  Icon28AttachOutline,\n  Icon28CheckCircleOutline,\n  Icon28Send,\n  Icon48WritebarDone,\n  Icon48WritebarSend,\n} from '@vkontakte/icons';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { hasAccessibleName } from '../../lib/accessibility';\nimport { COMMON_WARNINGS, warnOnce } from '../../lib/warnOnce';\nimport { AdaptiveIconRenderer } from '../AdaptiveIconRenderer/AdaptiveIconRenderer';\nimport { Counter } from '../Counter/Counter';\nimport { Tappable } from '../Tappable/Tappable';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden';\nimport styles from './WriteBarIcon.module.css';\n\nconst predefinedLabel = {\n  attach: '\u041f\u0440\u0438\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u0444\u0430\u0439\u043b',\n  send: '\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c',\n  done: '\u0413\u043e\u0442\u043e\u0432\u043e',\n};\n\nexport interface WriteBarIconProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * \u041f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043a\u043d\u043e\u043f\u043e\u043a \u0432 WriteBar \u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0438\u043a\u043e\u043d\u043a\u0438 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 \u043a\u043d\u043e\u043f\u043a\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b.\n   * \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430, `children` \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f, \u0430 \u0434\u043b\u044f `label` \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442 \u043d\u0430 \"ru_RU\".\n   *\n   * \u0412\u0430\u043b\u0438\u0434\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:\n   * - `attach` \u2013 \u0438\u043a\u043e\u043d\u043a\u0430 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 \"\u041f\u0440\u0438\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u0444\u0430\u0439\u043b\";\n   * - `send` \u2013 \u0438\u043a\u043e\u043d\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438, \u0442\u0435\u043a\u0441\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 \"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c\";\n   * - `done` \u2013 \u0438\u043a\u043e\u043d\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 \"\u0413\u043e\u0442\u043e\u0432\u043e\".\n   */\n  mode?: 'attach' | 'send' | 'done';\n  /**\n   * \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0430 \u0434\u043b\u044f \u043a\u043d\u043e\u043f\u043a\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0451\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432.\n   */\n  count?: number;\n  /**\n   * \u0422\u0435\u043a\u0441\u0442 \u043a\u043d\u043e\u043f\u043a\u0438. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0434\u043b\u044f \u0430\u0441\u0441\u0438\u0441\u0442\u0438\u0432\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439.\n   */\n  label?: string;\n}\n\nconst warn = warnOnce('WriteBarIcon');\n\n/**\n * @see https://vkcom.github.io/VKUI/#/WriteBarIcon\n */\nexport const WriteBarIcon = ({\n  mode,\n  children,\n  count,\n  label: labelProp,\n  ...restProps\n}: WriteBarIconProps): React.ReactNode => {\n  const platform = usePlatform();\n\n  let predefinedIcons;\n\n  switch (mode) {\n    case 'attach':\n      predefinedIcons = {\n        IconCompact: platform === 'ios' ? Icon28AddCircleOutline : Icon24Attach,\n        IconRegular: platform === 'ios' ? Icon28AddCircleOutline : Icon28AttachOutline,\n      };\n      break;\n\n    case 'send':\n      predefinedIcons = {\n        IconCompact: platform === 'ios' ? Icon48WritebarSend : Icon24Send,\n        IconRegular: platform === 'ios' ? Icon48WritebarSend : Icon28Send,\n      };\n      break;\n\n    case 'done':\n      predefinedIcons = {\n        IconCompact: platform === 'ios' ? Icon48WritebarDone : Icon24CheckCircleOutline,\n        IconRegular: platform === 'ios' ? Icon48WritebarDone : Icon28CheckCircleOutline,\n      };\n      break;\n\n    default:\n      break;\n  }\n\n  const label = labelProp ?? (mode && predefinedLabel[mode]);\n\n  if (process.env.NODE_ENV === 'development') {\n    /* istanbul ignore next: \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432 dev mode, \u0442\u0435\u0441\u0442 \u043d\u0430 hasAccessibleName() \u0435\u0441\u0442\u044c \u0432 lib/accessibility.test.tsx */\n    const isAccessible = hasAccessibleName({\n      children: [children, label],\n      ...restProps,\n    });\n\n    if (!isAccessible) {\n      warn(COMMON_WARNINGS.a11y['button-name'], 'error');\n    }\n  }\n\n  return (\n    <Tappable\n      Component=\"button\"\n      hasHover={false}\n      activeMode={styles.active}\n      {...restProps}\n      baseClassName={classNames(\n        styles.host,\n        platform === 'ios' && styles.ios,\n        mode === 'send' && styles.modeSend,\n        mode === 'done' && styles.modeDone,\n      )}\n    >\n      <span className={styles.in}>\n        {label && <VisuallyHidden>{label}</VisuallyHidden>}\n        {predefinedIcons ? <AdaptiveIconRenderer {...predefinedIcons} /> : children}\n      </span>\n      {hasReactNode(count) && (\n        <Counter className={styles.counter} size=\"s\">\n          {count}\n        </Counter>\n      )}\n    </Tappable>\n  );\n};", "output": "import { render, screen } from '@testing-library/react';\nimport { baselineComponent } from '../../testing/utils';\nimport { WriteBarIcon } from './WriteBarIcon';\n\ndescribe('WriteBarIcon', () => {\n  baselineComponent((props) => <WriteBarIcon label=\"WriteBarIcon\" {...props} />);\n\n  it('adds default text context for assigned mode', () => {\n    render(<WriteBarIcon data-testid=\"button\" mode=\"send\" />);\n\n    expect(screen.getByTestId('button')).toHaveTextContent('\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c');\n  });\n\n  it('overrides mode default text content when label is provided', () => {\n    const label = 'Send Message';\n    render(<WriteBarIcon data-testid=\"button\" mode=\"send\" label={label} />);\n\n    expect(screen.getByTestId('button')).toHaveTextContent(label);\n  });\n\n  it('shows counter when count={0} is provided', () => {\n    const count = 0;\n\n    render(<WriteBarIcon mode=\"attach\" count={0} />);\n    const counter = screen.getByText(count.toString());\n\n    expect(counter).toBeInTheDocument();\n  });\n});", "meta": {"repo": "VKCOM/VKUI", "stars": 1078, "component": "packages/vkui/src/components/WriteBarIcon/WriteBarIcon.tsx", "test": "packages/vkui/src/components/WriteBarIcon/WriteBarIcon.test.tsx"}}
